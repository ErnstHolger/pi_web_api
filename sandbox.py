from datetime import datetime, timedelta, timezone

from pi_web_sdk import AuthMethod, PIWebAPIClient, PIWebAPIConfig, WebIDType
from pi_web_sdk.exceptions import PIWebAPIError

BASE_URL = "https://172.31.155.202/piwebapi"
USERNAME = None
PASSWORD = None
ASSET_DATABASE_PATH = "\\\\WIN-040LFOGLJIE\\Default"
ELEMENT_NAME = "Demo Pump 100"
EVENT_NAME = "Demo Pump 100 Warmup"
POINT_PATH = r"\\PISERVER\sinusoid"


def utc_iso(dt: datetime) -> str:
    return dt.astimezone(timezone.utc).isoformat().replace("+00:00", "Z")


def main() -> None:
    config = PIWebAPIConfig(
        base_url=BASE_URL,
        auth_method=AuthMethod.ANONYMOUS,
        username=USERNAME,
        password=PASSWORD,
        verify_ssl=False,
        timeout=30,
        webid_type=WebIDType.ID_ONLY,
    )
    client = PIWebAPIClient(config)

    try:
        database = client.asset_database.get_default_database()
    except PIWebAPIError as exc:
        raise SystemExit(f"Could not resolve asset database: {exc.message}") from exc

    db_web_id = database["WebId"]

    element_definition = {
        "Name": ELEMENT_NAME + "1",
        "Description": "Element generated by pi_web_sdk example",
    }

    try:
        result = client.asset_database.create_element(db_web_id, element_definition)
        result = client.element.create_element(result["WebId"], element_definition)
        client.asset_database.get_elements(db_web_id)
        print(f"Created element '{ELEMENT_NAME}'.")
    except PIWebAPIError as exc:
        print(f"PIWebAPIError - Status: {exc.status_code}, Message: {exc.message}")
        if exc.status_code == 409:
            print(f"Element '{ELEMENT_NAME}' already exists, continuing.")
        else:
            raise SystemExit(f"Failed to create element: {exc.message}") from exc

    element_path = f"{ASSET_DATABASE_PATH}\\{ELEMENT_NAME}"
    try:
        element = client.element.get_by_path(element_path)
    except PIWebAPIError as exc:
        return
        raise SystemExit(f"Could not fetch element WebID: {exc.message}") from exc

    element_web_id = element["WebId"]

    start_time = datetime.now(timezone.utc) - timedelta(minutes=5)
    end_time = datetime.now(timezone.utc)
    event_definition = {
        "Name": EVENT_NAME,
        "Description": "Warmup event created by pi_web_sdk example",
        "StartTime": utc_iso(start_time),
        "EndTime": utc_iso(end_time),
    }

    try:
        event_response = client.event_frame.create(db_web_id, event_definition)
        event_web_id = (
            event_response.get("WebId") if isinstance(event_response, dict) else None
        )
        if not event_web_id:
            lookup = client.event_frame.get_event_frames(
                database_web_id=db_web_id,
                name_filter=EVENT_NAME,
                start_time=event_definition["StartTime"],
                end_time=event_definition["EndTime"],
                max_count=1,
            )
            items = lookup.get("Items", [])
            event_web_id = items[0]["WebId"] if items else None
        print(f"Created event frame '{EVENT_NAME}' (WebID={event_web_id}).")

        # Set referenced element after creation
        if event_web_id:
            try:
                reference_update = {"RefElementWebIds": [element_web_id]}
                client.event_frame.update(event_web_id, reference_update)
                print(f"Set primary referenced element to '{element_web_id}'.")
            except PIWebAPIError as ref_exc:
                print(f"Warning: Could not set referenced element: {ref_exc.message}")

    except PIWebAPIError as exc:
        raise SystemExit(f"Failed to create event frame: {exc.message}") from exc

    try:
        point = client.point.get_by_path(POINT_PATH)
    except PIWebAPIError as exc:
        raise SystemExit(
            f"Could not resolve PI point '{POINT_PATH}': {exc.message}"
        ) from exc

    value_payload = {
        "Timestamp": utc_iso(datetime.now(timezone.utc)),
        "Value": 72.5,
    }

    try:
        client.stream.update_value(
            point["WebId"], value_payload, update_option="Replace"
        )
        print(f"Wrote value {value_payload['Value']} to {POINT_PATH}.")
    except PIWebAPIError as exc:
        raise SystemExit(f"Failed to write stream value: {exc.message}") from exc


if __name__ == "__main__":
    main()
